import{inject as o,computed as e,createVNode as s,mergeProps as t}from"/Users/alexandarvalov/Documents/GitHub/nzis-import-app/node_modules/vue/index.mjs";import{makeVWindowProps as l,VWindow as r}from"../VWindow/VWindow.mjs";import{useProxiedModel as m}from"../../composables/proxiedModel.mjs";import{VTabsSymbol as a}from"./shared.mjs";import{genericComponent as n}from"../../util/defineComponent.mjs";import{propsFactory as u}from"../../util/propsFactory.mjs";import{useRender as i}from"../../util/useRender.mjs";import{omit as d}from"../../util/helpers.mjs";const p=u({...d(l(),["continuous","nextIcon","prevIcon","showArrows","touch","mandatory"])},"VTabsWindow"),c=n()({name:"VTabsWindow",props:p(),emits:{"update:modelValue":o=>!0},setup(l,n){let{slots:u}=n;const d=o(a,null),p=m(l,"modelValue"),c=e({get(){var o;return null==p.value&&d?null==(o=d.items.value.find((o=>d.selected.value.includes(o.id))))?void 0:o.value:p.value},set(o){p.value=o}});return i((()=>{const o=r.filterProps(l);return s(r,t({_as:"VTabsWindow"},o,{modelValue:c.value,"onUpdate:modelValue":o=>c.value=o,class:["v-tabs-window",l.class],style:l.style,mandatory:!1,touch:!1}),u)})),{}}});export{c as VTabsWindow,p as makeVTabsWindowProps};
