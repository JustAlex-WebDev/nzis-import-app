function t(t,e){var n;(null==(n=t._mutate)?void 0:n[e.instance.$.uid])&&(t._mutate[e.instance.$.uid].observer.disconnect(),delete t._mutate[e.instance.$.uid])}const e={mounted:function(e,n){const i=n.modifiers||{},u=n.value,{once:o,immediate:a,...l}=i,d=!Object.keys(l).length,{handler:c,options:s}="object"==typeof u?u:{handler:u,options:{attributes:(null==l?void 0:l.attr)??d,characterData:(null==l?void 0:l.char)??d,childList:(null==l?void 0:l.child)??d,subtree:(null==l?void 0:l.sub)??d}},r=new MutationObserver((function(){null==c||c(arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],arguments.length>1?arguments[1]:void 0),o&&t(e,n)}));a&&(null==c||c([],r)),e._mutate=Object(e._mutate),e._mutate[n.instance.$.uid]={observer:r},r.observe(e,s)},unmounted:t};export{e as Mutate,e as default};
